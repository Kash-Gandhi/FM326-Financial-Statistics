knitr::opts_chunk$set(echo = TRUE)
getSymbols("MSFT", from="2014-01-01") #Microsoft index
library(quantmod)
library(quantmod)
getSymbols("MSFT", from="2014-01-01") #Microsoft index
chartSeries(MSFT)
year="2021";
chartSeries(MSFT[year])
chartSeries(MSFT[year], type="l")
chartSeries(diff(MSFT[year]), type="l")
MSFTdata = MSFT[year][,4] ## Just the daily closing price
MSFTdata = as.vector(MSFTdata) ## change it to vector format for analysis
MSFTreturn = diff(log(MSFTdata))
plot.ts(MSFTreturn)
library(TSA)
acf(MSFTreturn, 60)
pacf(MSFTreturn, 60)
acf(MSFTreturn^2,60)
pacf(MSFTreturn^2,60)
View(MSFT)
View(MSFT)
knitr::opts_chunk$set(echo = TRUE)
AAPL = read.csv("AAPL.csv")
AAPL = read.csv("AAPL.csv")
QQNORM(AAPL)
qqnorm(AAPL)
AAPL = read.csv("AAPL.csv")
ggplot(mapping=aes(sample=AAPL))
library(ggplot2)
library(qqplotr)
AAPL = read.csv("AAPL.csv")
ggplot(mapping=aes(sample=AAPL))
# qqnorm(AAPL)
AAPL = read.csv("AAPL.csv")
ggplot(mapping=aes(sample=AAPL)) + stat_qq_point(size=2)
install.packages("qqplotr")
library(ggplot2)
library(qqplotr)
AAPL = read.csv("AAPL.csv")
ggplot(mapping=aes(sample=AAPL)) + stat_qq_point(size=2)
# qqnorm(AAPL)
AAPL = read.csv("AAPL.csv")
ggplot(mapping = aes(sample = AAPL)) + stat_qq_point(size = 2)
# qqnorm(AAPL)
AAPL = read.csv("AAPL.csv")
time = as.timeDate(data[,"date"])
# install packages
install.packages("reshape2")
install.packages("timeSeries")
# Load libraries
library(ggplot2)
library(qqplotr)
library("reshape2")
library("timeSeries")
AAPL = read.csv("AAPL.csv")
time = as.timeDate(data[,"date"])
AAPL = read.csv("AAPL.csv")
time = as.timeDate(data[,"date"])
AAPL = read.csv("AAPL.csv")
time = as.timeDate(data[,"date"])
ts.price = timeSeries(data[,"PRC"], charvec = time) # charvec is basically for x-axis in the plot func next
time = as.timeDate(data[,"date"])
data = read.csv("AAPL.csv")
time = as.timeDate(data[,"date"])
ts.price = timeSeries(data[,"PRC"], charvec = time) # charvec is basically for x-axis in the plot func next
plot(ts.price, main="AAPL", col = "darkgreen", ylab = "Price"); grid()
#ggplot(mapping = aes(sample = AAPL)) + stat_qq_point(size = 2)
# qqnorm(AAPL)
plot(data)
View(data)
View(data)
plot(data[,"PRC"])
qqplot(data)
qqplot(data[,"PRC"])
qqplot(data[,"PRC"])
qqPlot(data[,"PRC"])
qqnorm(data[,"PRC"])
hist(data[,"PRC"])
dnorm(data[,"PRC"])
qqnorm
data = read.csv("AAPL.csv")
qqnorm(data[,"PRC"])
qqnorm(data[,"PRC"])
hist(data[,"PRC"])
plot(data[,"PRC"])
qqnorm(data[,"PRC"]); qqline(data[,"PRC"])
data = read.csv("AAPL.csv")
qqnorm(data[,"PRC"]); qqline(data[,"PRC"])
hist(data[,"PRC"])
time = as.timeDate(data[,"date"])
ts.price = timeSeries(data[,"PRC"], charvec = time) # charvec is basically for x-axis in the plot func next
plot(ts.price, main="AAPL", col = "darkgreen", ylab = "Price"); grid()
